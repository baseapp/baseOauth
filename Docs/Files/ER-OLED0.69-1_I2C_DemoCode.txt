//----------------------------------------------------------------------
//EASTRISING TECHNOLOGY CO,.LTD.//
// Module    : ER-OLED0.69-1 Series  0.69"  96*16 dot
// Lanuage   : C51 Code
// Create    : JAVEN
// Date      : May-12-2013
// Drive IC  : SSD1306
// INTERFACE : I2C
// MCU 		 : AT89LV52
// VDD		 : 3V   VBAT: 3.6V    
// SA0 connected to VSS. Slave address:White:0x70 Read 0x71
//----------------------------------------------------------------------


#include <AT89X52.H>
#include <intrins.h>

#define uint unsigned int
#define uchar unsigned char


#define SDA                  P1_1
#define SCL                  P1_0

#define RST                  P3_4
sbit	int0=P3^2;
sbit key_add=P0^1;
sbit key_dec=P0^2;
uchar Contrast_level=0x7F;
bit log=0;



#define Write_Address 0x78/*slave addresses with write*/
#define Read_Address 0x79/*slave addresses with read*/

#define Start_column	0x00
#define Start_page		0x00
#define	StartLine_set	0x00

void Delay1(uint n);
void Write_number(uchar code *n,uchar k,uchar station_dot);
void display_Contrast_level(uchar number);
void adj_Contrast(void);
void Delay(uint n);
void Set_Page_Address(unsigned char add);
void Set_Column_Address(unsigned char add);
void Set_Contrast_Control_Register(unsigned char mod);
void Initial(void);
void Display_Chess(unsigned char value);
void Display_Chinese(unsigned char ft[]);
void Display_Chinese_Column(unsigned char ft[]);
void Display_Picture(unsigned char pic[]);

void SentByte(unsigned char Byte);
void Check_Ack(void);//Acknowledge
void Stop(void);
void Start(void);
void Send_ACK(void);
unsigned char ReceiveByte(void);

uchar code	    num[]={0x00,0xF8,0xFC,0x04,0x04,0xFC,0xF8,0x00,0x00,0x03,0x07,0x04,0x04,0x07,0x03,0x00,  	   /*--  文字:  0~9  --*/
0x00,0x00,0x08,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x04,0x07,0x07,0x04,0x00,0x00,  
0x00,0x18,0x1C,0x84,0xC4,0x7C,0x38,0x00,0x00,0x06,0x07,0x05,0x04,0x04,0x04,0x00,
0x00,0x08,0x0C,0x24,0x24,0xFC,0xD8,0x00,0x00,0x02,0x06,0x04,0x04,0x07,0x03,0x00,
0x80,0xE0,0x70,0x18,0xFC,0xFC,0x00,0x00,0x00,0x01,0x01,0x05,0x07,0x07,0x04,0x00,
0x00,0x7C,0x7C,0x24,0x24,0xE4,0xC4,0x00,0x00,0x03,0x07,0x04,0x04,0x07,0x03,0x00,
0x00,0xF0,0xF8,0x6C,0x24,0xEC,0xCC,0x00,0x00,0x03,0x07,0x04,0x04,0x07,0x03,0x00,
0x00,0x0C,0x0C,0xC4,0xFC,0x3C,0x04,0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x00,
0x00,0x98,0xFC,0x64,0x64,0xFC,0x98,0x00,0x00,0x03,0x07,0x04,0x04,0x07,0x03,0x00,
0x00,0x78,0xFC,0x84,0xC4,0xFC,0xF8,0x00,0x00,0x06,0x06,0x04,0x06,0x03,0x01,0x00};



unsigned char code font[]=
{

/*--  文字:  深  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x10,0x61,0x06,0xE0,0x00,0x26,0x22,0x1A,0x02,0xC2,0x0A,0x12,0x32,0x06,0x02,0x00,
0x04,0xFC,0x03,0x20,0x20,0x11,0x11,0x09,0x05,0xFF,0x05,0x09,0x19,0x31,0x10,0x00,

/*--  文字:  圳  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x10,0x10,0x10,0xFE,0x10,0x10,0xFE,0x00,0x00,0xFC,0x00,0x00,0x00,0xFE,0x00,0x00,
0x08,0x08,0x04,0x47,0x24,0x18,0x07,0x00,0x00,0x1F,0x00,0x00,0x00,0x7F,0x00,0x00,

/*--  文字:  旭  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x10,0x10,0x10,0xFF,0x10,0xF0,0x00,0x00,0xFE,0x22,0x22,0x22,0x22,0xFE,0x00,0x00,
0x40,0x30,0x0E,0x01,0x00,0x3F,0x40,0x40,0x47,0x44,0x44,0x44,0x44,0x47,0x70,0x00,

/*--  文字:  日  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0x00,0xFE,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0xFE,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x3F,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x3F,0x00,0x00,0x00,0x00,

/*--  文字:  东  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x04,0x04,0xC4,0xB4,0x8C,0x87,0x84,0xF4,0x84,0x84,0x84,0x84,0x04,0x00,0x00,
0x00,0x00,0x20,0x18,0x0E,0x04,0x20,0x40,0xFF,0x00,0x02,0x04,0x18,0x30,0x00,0x00,

/*--  文字:  方  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x08,0x08,0x08,0x08,0x08,0x08,0xF9,0x4A,0x4C,0x48,0x48,0xC8,0x08,0x08,0x08,0x00,
0x40,0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x20,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,

/*--  文字:  科  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x10,0x12,0x92,0x72,0xFE,0x51,0x91,0x00,0x22,0xCC,0x00,0x00,0xFF,0x00,0x00,0x00,
0x04,0x02,0x01,0x00,0xFF,0x00,0x04,0x04,0x04,0x02,0x02,0x02,0xFF,0x01,0x01,0x00,

/*--  文字:  技  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x08,0x08,0x88,0xFF,0x48,0x28,0x00,0xC8,0x48,0x48,0x7F,0x48,0xC8,0x48,0x08,0x00,
0x01,0x41,0x80,0x7F,0x00,0x40,0x40,0x20,0x13,0x0C,0x0C,0x12,0x21,0x60,0x20,0x00,

/*--  文字:  成  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0xF8,0x48,0x48,0x48,0xC8,0x08,0xFF,0x08,0x09,0x0A,0xC8,0x88,0x08,0x00,
0x40,0x30,0x0F,0x00,0x08,0x50,0x4F,0x20,0x10,0x0B,0x0C,0x12,0x21,0x40,0xF0,0x00,

/*--  文字:  立  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x10,0x10,0x90,0x10,0x10,0x11,0x16,0x10,0x10,0xF0,0x50,0x10,0x10,0x00,0x00,
0x40,0x40,0x40,0x40,0x43,0x4E,0x40,0x60,0x58,0x47,0x40,0x40,0x40,0x60,0x40,0x00,

/*--  文字:  于  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x42,0x40,0x00,
0x00,0x00,0x00,0x00,0x20,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

/*--  文字:  二  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x06,0x04,0x00,0x00,0x00,
0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x18,0x10,0x00,

/*--  文字:  零  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x0C,0x04,0x55,0x55,0x55,0x85,0x7F,0x85,0x55,0x55,0x55,0x05,0x0C,0x04,0x00,
0x04,0x04,0x04,0x0A,0x0A,0x09,0x2A,0xCC,0x28,0x19,0x09,0x02,0x06,0x02,0x02,0x00,

/*--  文字:  零  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x0C,0x04,0x55,0x55,0x55,0x85,0x7F,0x85,0x55,0x55,0x55,0x05,0x0C,0x04,0x00,
0x04,0x04,0x04,0x0A,0x0A,0x09,0x2A,0xCC,0x28,0x19,0x09,0x02,0x06,0x02,0x02,0x00,

/*--  文字:  二  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x06,0x04,0x00,0x00,0x00,
0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x18,0x10,0x00,

/*--  文字:  年  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x40,0x20,0x10,0x0C,0xE3,0x22,0x22,0x22,0xFE,0x22,0x22,0x22,0x22,0x02,0x00,0x00,
0x04,0x04,0x04,0x04,0x07,0x04,0x04,0x04,0xFF,0x04,0x04,0x04,0x04,0x04,0x04,0x00,

/*--  文字:  期  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x04,0xFF,0x54,0x54,0x54,0xFF,0x04,0x00,0xFE,0x22,0x22,0x22,0xFE,0x00,0x00,
0x42,0x22,0x1B,0x02,0x02,0x0A,0x33,0x62,0x18,0x07,0x02,0x22,0x42,0x3F,0x00,0x00,

/*--  文字:  待  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x20,0x10,0x08,0xC7,0x3A,0x50,0x44,0x44,0x44,0x7F,0x44,0xC4,0x44,0x44,0x40,0x00,
0x00,0x02,0x01,0xFF,0x00,0x02,0x02,0x1A,0x02,0x42,0x82,0x7F,0x02,0x02,0x02,0x00,

/*--  文字:  着  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x44,0x54,0x54,0x55,0x56,0xD4,0x7C,0x54,0x54,0x56,0x55,0x54,0x44,0x44,0x00,
0x08,0x08,0x04,0x04,0x02,0xFF,0x55,0x55,0x55,0x55,0x55,0x55,0xFF,0x00,0x00,0x00,

/*--  文字:  您  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x40,0x30,0xFC,0x03,0x90,0x68,0x06,0x04,0xF4,0x04,0x24,0x44,0x8C,0x04,0x00,
0x00,0x20,0x38,0x03,0x38,0x40,0x40,0x49,0x52,0x41,0x40,0x70,0x00,0x09,0x30,0x00,

/*--  文字:  来  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x80,0x84,0x84,0x94,0xA4,0xC4,0xFF,0x84,0xC4,0xB4,0x94,0x84,0x84,0x80,0x00,
0x20,0x20,0x10,0x10,0x08,0x04,0x02,0xFF,0x01,0x02,0x04,0x08,0x18,0x30,0x10,0x00,

/*--  文字:  电  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0xF8,0x48,0x48,0x48,0x48,0xFF,0x48,0x48,0x48,0x48,0xF8,0x00,0x00,0x00,
0x00,0x00,0x0F,0x04,0x04,0x04,0x04,0x3F,0x44,0x44,0x44,0x44,0x4F,0x40,0x70,0x00,

/*--  文字:  来  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x80,0x84,0x84,0x94,0xA4,0xC4,0xFF,0x84,0xC4,0xB4,0x94,0x84,0x84,0x80,0x00,
0x20,0x20,0x10,0x10,0x08,0x04,0x02,0xFF,0x01,0x02,0x04,0x08,0x18,0x30,0x10,0x00,

/*--  文字:  函  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0xE0,0x02,0x12,0xE2,0x42,0x02,0xF2,0x12,0x8A,0x66,0x47,0x02,0xE0,0x00,0x00,
0x00,0x7F,0x20,0x24,0x24,0x2A,0x31,0x2F,0x21,0x22,0x24,0x2C,0x20,0x7F,0x00,0x00,

/*--  文字:  我  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x20,0x20,0x22,0x22,0xFE,0x21,0x21,0x20,0x20,0xFF,0x20,0x22,0xAC,0x20,0x20,0x00,
0x04,0x04,0x42,0x82,0x7F,0x01,0x01,0x10,0x10,0x08,0x07,0x1A,0x21,0x40,0xF0,0x00,

/*--  文字:  们  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x40,0xF0,0x1C,0x03,0xF0,0x01,0x0E,0x04,0x00,0x04,0x04,0x04,0xFC,0x00,0x00,
0x00,0x00,0x7F,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x3F,0x00,0x00,

/*--  文字:  真  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x04,0x04,0x04,0xF4,0x54,0x5C,0x57,0x54,0x54,0x54,0xF4,0x04,0x06,0x04,0x00,
0x10,0x90,0x90,0x50,0x5F,0x35,0x15,0x15,0x15,0x35,0x55,0x5F,0x90,0x90,0x10,0x00,

/*--  文字:  诚  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x20,0x21,0xE6,0x02,0x08,0xF8,0x88,0x88,0x88,0x08,0xFF,0x08,0x0A,0xCC,0x88,0x00,
0x00,0x00,0x3F,0x90,0x68,0x1F,0x20,0x40,0x3F,0x20,0x10,0x0F,0x14,0x23,0x78,0x00,

/*--  文字:  为  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x10,0x10,0x12,0x14,0x1C,0x10,0xF0,0x9F,0x10,0x10,0x10,0x10,0xF8,0x10,0x00,
0x00,0x00,0x40,0x20,0x10,0x08,0x06,0x01,0x00,0x11,0x26,0x40,0x20,0x1F,0x00,0x00,

/*--  文字:  您  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x80,0x40,0x30,0xFC,0x03,0x90,0x68,0x06,0x04,0xF4,0x04,0x24,0x44,0x8C,0x04,0x00,
0x00,0x20,0x38,0x03,0x38,0x40,0x40,0x49,0x52,0x41,0x40,0x70,0x00,0x09,0x30,0x00,

/*--  文字:  服  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x00,0x00,0xFF,0x91,0x91,0xFF,0x00,0x00,0xFF,0xC1,0x41,0x49,0x51,0xCF,0x00,0x00,
0x40,0x30,0x0F,0x20,0x40,0x3F,0x00,0x00,0x7F,0x21,0x16,0x08,0x36,0x61,0x20,0x00,

/*--  文字:  务  --*/
/*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
0x20,0x10,0x10,0x88,0x84,0x4F,0x52,0xA2,0x22,0x52,0x4A,0x86,0x80,0x80,0x80,0x00,
0x80,0x81,0x41,0x42,0x22,0x12,0x0E,0x03,0x02,0x42,0x82,0x7E,0x00,0x01,0x00,0x00

};

unsigned char code pic[]=
{/*-- \ER-OLED0.69-1.bmp  --*/
/*-- 96x16  --*/
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x49,
0x49,0x49,0x00,0x00,0x7F,0x09,0x19,0xA9,0x46,0x00,0x10,0x10,0x00,0x00,0x3E,0x41,
0x41,0x41,0x3E,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,0x00,0x7F,0x49,0x49,0x49,0x80,
0x00,0x7F,0x41,0x41,0x41,0x3E,0x00,0x3E,0x41,0x41,0x3E,0x00,0x00,0x40,0x00,0x3E,
0x49,0x49,0x32,0x00,0x26,0x49,0x49,0x3E,0x00,0x10,0x10,0x00,0x04,0x02,0x7F,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x82,0x0C,0x30,0x0E,0x30,0x0C,0x02,0x02,0x0C,0x30,0x0E,0x30,0x0C,0x02,0x02,0x0C,
0x30,0x0E,0x30,0x0C,0x02,0x20,0x00,0x3F,0x22,0x22,0x22,0x1C,0x00,0x1E,0x20,0x20,
0x20,0x3E,0x00,0x82,0x9C,0x60,0x1C,0x02,0x08,0x08,0x00,0x1C,0x22,0x22,0x22,0x3F,
0x00,0x3D,0x00,0x00,0x24,0x2A,0x2A,0x12,0x00,0xFE,0x22,0x22,0x22,0x1C,0x00,0x3F,
0x00,0x00,0x12,0x2A,0x2A,0x3C,0x00,0x82,0x9C,0x60,0x1C,0x02,0x20,0x00,0x1C,0x22,
0x22,0x14,0x00,0x1C,0x22,0x22,0x22,0x1C,0x00,0x3E,0x02,0x02,0x3C,0x02,0x02,0xBC,


};



unsigned char code pic1[]=
{0x07,0x01,0x01,0x00,0x00,0x00,0xF0,0xF0,0x60,0x30,0x30,0xF0,0xE0,0x60,0x30,0x30,
0xF0,0xE0,0x00,0x00,0xF0,0xF0,0x60,0x30,0x30,0x70,0xE0,0xC0,0x00,0x08,0x0C,0x06,
0x66,0x66,0xE6,0xFE,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xC6,0xC6,0xC6,
0xC6,0xEE,0x7C,0x38,0x00,0x00,0xFE,0xFE,0x00,0x00,0x60,0x70,0x30,0xB0,0xB0,0xF0,
0xE0,0x00,0x30,0xF0,0xC0,0x00,0x00,0x00,0xC0,0xF0,0x30,0x00,0xC0,0xE0,0xB0,0xB0,
0xB0,0xE0,0xC0,0x00,0x00,0xF0,0xF0,0x60,0x30,0x30,0x00,0x00,0x00,0x01,0x01,0x07,
0xE0,0x80,0x80,0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x00,
0x1F,0x1F,0x00,0x00,0xFF,0xFF,0x0C,0x18,0x18,0x1C,0x0F,0x07,0x00,0x06,0x0E,0x1C,
0x18,0x18,0x1C,0x0F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x0E,0x1F,0x1B,0x19,0x19,0x0F,
0x1F,0x10,0x00,0xC0,0xC7,0xFF,0x7C,0x1F,0x07,0x00,0x00,0x00,0x07,0x0F,0x1D,0x19,
0x19,0x0D,0x05,0x00,0x00,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xE0,

};

unsigned char code pic2[]=
{

0x01,0xFC,0xFC,0x40,0x20,0xE0,0xC0,0x00,0xE0,0xE0,0x00,0x00,0xE0,0xE0,0x00,0x60,
0xE0,0x80,0x00,0x80,0xE0,0x60,0x00,0x00,0x00,0x00,0x00,0xC0,0xE0,0x20,0x40,0xFC,
0xFC,0x00,0xEC,0xEC,0x00,0xC0,0xE0,0xA0,0x20,0x60,0x40,0x00,0xE0,0xE0,0x40,0x20,
0xE0,0xC0,0x00,0xFC,0xFC,0x00,0x40,0x20,0xA0,0xA0,0xE0,0xC0,0x00,0x60,0xE0,0x80,
0x00,0x80,0xE0,0x60,0x00,0x00,0x00,0xC0,0xE0,0x20,0x20,0x60,0x40,0x00,0xC0,0xE0,
0x20,0x20,0xE0,0xC0,0x00,0xE0,0xE0,0x40,0x20,0xE0,0xE0,0x40,0x20,0xE0,0xC0,0x01,
0x80,0x0F,0x0F,0x04,0x08,0x0F,0x07,0x00,0x07,0x0F,0x08,0x04,0x0F,0x0F,0x00,0x40,
0x43,0x7F,0x7C,0x1F,0x03,0x00,0x00,0x03,0x03,0x03,0x00,0x07,0x0F,0x08,0x04,0x0F,
0x0F,0x00,0x0F,0x0F,0x00,0x04,0x0D,0x09,0x0B,0x0F,0x06,0x00,0x7F,0x7F,0x04,0x08,
0x0F,0x07,0x00,0x0F,0x0F,0x00,0x06,0x0F,0x09,0x08,0x0F,0x0F,0x00,0x40,0x43,0x7F,
0x7C,0x1F,0x03,0x00,0x0C,0x0C,0x00,0x07,0x0F,0x08,0x08,0x0C,0x04,0x00,0x07,0x0F,
0x08,0x08,0x0F,0x07,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x80,

};


unsigned char code pic3[]=
{
0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x30,0x18,0xFC,0xFC,0x00,0x00,
0x00,0x30,0x38,0x1C,0x0C,0x0C,0x8C,0xF8,0x70,0x00,0x00,0x00,0x60,0x60,0x00,0x00,
0x10,0x18,0x0C,0xCC,0xCC,0xCC,0xFC,0x38,0x00,0x00,0x00,0xC0,0xE0,0x38,0xFC,0xFC,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x1C,0x60,0x1C,0x03,0x1C,
0x60,0x1C,0x03,0x38,0x54,0x54,0x58,0x00,0x38,0x44,0x44,0x44,0x7F,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x01,
0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x00,0x00,
0x00,0x30,0x38,0x3C,0x36,0x37,0x33,0x31,0x30,0x00,0x00,0x00,0x30,0x30,0x00,0x00,
0x0C,0x1C,0x38,0x30,0x30,0x39,0x1F,0x0F,0x00,0x0E,0x0F,0x0D,0x0C,0x0C,0x3F,0x3F,
0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x1E,0x11,0x1E,0x60,0x00,0xFC,0x44,
0x44,0x44,0x38,0x00,0x7C,0x04,0x04,0x00,0x7D,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,
0x00,0x26,0x49,0x49,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x80,

};




/****************INTERRUPT   STOP MARK **************/
void Step(void) interrupt 0 using 0
{
	Delay1(300);
	if(int0==0)
 // {	while(IE0);
	log=!log;
 // }
   while(!int0);
  return;

}




/****************DELAY **************/
void Delay1(uint n)
{while(n--);
 
   
	return;
}

/****************WRITE CONTRAST VALUE DISPLAY DATA **************/
void Write_number(uchar code *n,uchar k,uchar station_dot)
{uchar i; 
		Start();
		SentByte(Write_Address);
		SentByte(0x40);
			for(i=0;i<8;i++)
				{
				SentByte(*(n+16*k+i));
				}
		Stop();
				

	Set_Page_Address(Start_page+1)	;
    Set_Column_Address(Start_column+station_dot*8);	
			Start();
			SentByte(Write_Address);
			SentByte(0x40);
			for(i=8;i<16;i++)
				{
				SentByte(*(n+16*k+i));
				}
			Stop();

}



/****************DISPLAY CONTRAST VALUE **************/
void display_Contrast_level(uchar number)
{	uchar number1,number2,number3;
	number1=number/100;number2=number%100/10;number3=number%100%10;
	Set_Column_Address(Start_column+0*8);
	Set_Page_Address(Start_page);
    Write_number(num,number1,0);
	Set_Column_Address(Start_column+1*8);
	Set_Page_Address(Start_page);
	Write_number(num,number2,1);
	Set_Column_Address(Start_column+2*8);
	Set_Page_Address(Start_page);
	Write_number(num,number3,2);

}



/****************CONTRAST ADJUSTEMENT FUNCTION **************/
void adj_Contrast(void)
{	Delay1(300);
 	 if((key_add==0)||(key_dec==0))
		{		
		 if	(key_add==0) 
			{Contrast_level+=1;
		   	Set_Contrast_Control_Register(Contrast_level);	
			display_Contrast_level(Contrast_level);
			Delay1(8000);
			if(key_add==0)
				{Delay1(8000);
					if(key_add==0)			
						{Delay1(8000);
							if(key_add==0)
								{Delay1(8000);
									if(key_add==0)

										{while(key_add==0)
											{Contrast_level+=1; 
		   										Set_Contrast_Control_Register(Contrast_level);	
												display_Contrast_level(Contrast_level);
							 					Delay1(4000); 
											}
										}
								}				
						}						
				}												
			}
	


		  
	
		 if	(key_dec==0) 
			{Contrast_level-=1; 
		   	Set_Contrast_Control_Register(Contrast_level);	
			display_Contrast_level(Contrast_level);
			Delay1(8000);
			if(key_dec==0)
				{Delay1(8000);
					if(key_dec==0)			
						{Delay1(8000);
							if(key_dec==0)
								{Delay1(8000);
									if(key_dec==0)

										{while(key_dec==0)
											{Contrast_level-=1; 
		   										Set_Contrast_Control_Register(Contrast_level);	
												display_Contrast_level(Contrast_level);
							 					Delay1(4000); 
											}
										}
								}				
						}						
				}												
			}

	  	}
}


/****************DEALY**************/
void Delay(uint n)
{while(n)
 {    if((key_add==0)||(key_dec==0)) adj_Contrast();  //If there are keys pressed into contrast adjustment function

	  n--;
 }
 	for(;log==1;)
	{
 	 if((key_add==0)||(key_dec==0)) adj_Contrast();  //If there are keys pressed into contrast adjustment function
	}

	return;
}

/****************START**************/
void Start(void)
{	SDA=1;
	SCL=1;
    _nop_();
	SDA=0;
    _nop_();
	SCL=0;
}	


/****************STOP**************/
void Stop(void)
{
	SCL=0;
	SDA=0;
    _nop_();
	SCL=1;
    _nop_();
	SDA=1;
}	


/****************CHECK ACK**************/
void Check_Ack(void)//Acknowledge
{
    unsigned char ack=1;
	SDA=1;
    SCL=1;
    _nop_();
    while(ack==1){ack=SDA;}
    _nop_();
    SCL=0;
    return;
}

/****************SEND BYTE**************/
void SentByte(unsigned char Byte)
{
	uchar i;
	for(i=0;i<8;i++)
     {  SCL=0;
        if((Byte&0x80)==0x80) SDA=1;
       	else SDA=0;
       	SCL=1;
    	_nop_();		
        Byte=Byte<<1;
     }
	SCL=0;
	Check_Ack();
	
}
/****************READ BYTE**************/
unsigned char ReceiveByte(void)
{uchar i,rudata=0;
	SCL=0;
	SDA=1;
	for(i=0;i<8;i++)
     {  SCL=1;
    	_nop_();	
		if (SDA==1)rudata|=0x01;
		else rudata|=0x00;
        rudata=rudata<<1;
		SCL=0;
    	_nop_();	
     }	
	Send_ACK();
	return rudata;
}

/****************SEND ACK**************/
void Send_ACK(void)
{	SCL=0;
	SDA=0;
    _nop_();	
	SCL=1;
	SCL=0;
}



/****************SET PAGE ADDRESS**************/
void Set_Page_Address(unsigned char add)
{	Start();
	SentByte(Write_Address);
	SentByte(0x80);
    add=0xb0|add;
	SentByte(add);
    _nop_();
	return;
}

/****************SET COLUMN ADDRESS**************/
void Set_Column_Address(unsigned char add)
{	Start();
	SentByte(Write_Address);
	SentByte(0x80);
	SentByte((0x10|(add>>4)));
	SentByte(0x80);
	SentByte((0x0f&add));
 	Stop();
	return;
}


/****************SET CONTRAST**************/
void Set_Contrast_Control_Register(unsigned char mod)
{
	Start();
	SentByte(Write_Address);
	SentByte(0x80);
	SentByte(0x81);
	SentByte(0x80);
	SentByte(mod);
 	Stop();
	return;
}



void Initial(void)
{
/******************RESET********************/
	RST=1;
	Delay(200);
	RST=0;
	Delay(2000);
	RST=1;
	Delay(200);
/*******************************************/
	Start();
	SentByte(Write_Address);
	SentByte(0x80);
	SentByte(0xae);//--turn off oled panel
	SentByte(0x80);

	SentByte(0xd5);//--set display clock divide ratio/oscillator frequency
	SentByte(0x80);
	SentByte(0xf0);//--set divide ratio
	SentByte(0x80);

	SentByte(0xa8);//--set multiplex ratio(1 to 64)
	SentByte(0x80);
	SentByte(0x0f);//--1/16 duty
	SentByte(0x80);

	SentByte(0xd3);//-set display offset
	SentByte(0x80);
	SentByte(0x00);//-not offset
	SentByte(0x80);

	SentByte(0x40);//--set start line address
	SentByte(0x80);

	SentByte(0xa6);//--set normal display
	SentByte(0x80);

	SentByte(0xa4);//Disable Entire Display On
	SentByte(0x80);

	SentByte(0xa1);//--set segment re-map 96 to 1
	SentByte(0x80);

	SentByte(0xC8);//--Set COM Output Scan Direction 16 to 1
	SentByte(0x80);
	
	SentByte(0xda);//--set com pins hardware configuration
	SentByte(0x80);
	SentByte(0x02);
	SentByte(0x80);

	SentByte(0x81);//--set contrast control register
	SentByte(0x80);
	SentByte(Contrast_level);
	SentByte(0x80);

	SentByte(0xd9);//--set pre-charge period
	SentByte(0x80);
	SentByte(0x22);
	SentByte(0x80);

	SentByte(0xdb);//--set vcomh
	SentByte(0x80);
	SentByte(0x49);//--0.83*vref

	SentByte(0x80);

	SentByte(0x8d);//--set Charge Pump enable/disable
	SentByte(0x80);
	SentByte(0x14);//--set(0x10) disable
	SentByte(0x80);


	SentByte(0xaf);//--turn on oled panel

 	Stop();
}


/****************SHW DOT******************/
void Display_Chess(unsigned char value)
{
    unsigned char i,j,k;
    for(i=0;i<0x2;i++)
	{
		Set_Page_Address(i);

        Set_Column_Address(0x00);
		
		Start();
		SentByte(Write_Address);
		SentByte(0x40);
		for(j=0;j<12;j++)
		{
		    for(k=0;k<0x04;k++)
				SentByte(value);
		    for(k=0;k<0x04;k++)
				SentByte(~value);
		}
		 	Stop();
	}
    return;
}


/****************SHW CNINESE**************/
void Display_Chinese(unsigned char ft[])
{
    unsigned char i,j,k,b,c=0;
	unsigned int	num=0;

for(b=0;b<1;b++)
  {
    for(i=0;i<0x02;i++)
	{	Set_Page_Address(c);
    	Set_Column_Address(0x00);
	    num=i*0x10+b*256;
		Start();
		SentByte(Write_Address);
		SentByte(0x40);
		for(j=0;j<0x06;j++)
		{
            for(k=0;k<0x10;k++)
			{
				SentByte(ft[num+k]);
			}
			num+=0x20;
		}c++;
		Stop();
	}
  }
    return;
}



/****************SHW CNINESE**************/
void Display_Chinese_Column(unsigned char ft[])
{
    unsigned char i,j,k,num=0x40;
    for(i=0;i<0x2;i++)
	{
		Set_Page_Address(i);
        Set_Column_Address(0x00);
		Start();
		SentByte(Write_Address);
		SentByte(0x40);
		for(j=0;j<0x06;j++)
		{
            for(k=0;k<0x10;k++)
			{
				SentByte(ft[num+k]);
			}
		}
		Stop();
	num+=0x10;
	}
    return;
}


/****************SHW PICTURE**************/
void Display_Picture(unsigned char pic[])
{
    unsigned char i,j,num=0;
	for(i=0;i<0x2;i++)
	{
	Set_Page_Address(i);
    Set_Column_Address(0x00);
		Start();
		SentByte(Write_Address);
		SentByte(0x40);
        for(j=0;j<96;j++)
		{
			SentByte(pic[i*96+j]);
		}
		Stop();
	}
    return;
}




/****************MAIN FUNCTION**************/
void main(void)
{	IE=0x81;
	IP=0x01;
	TCON=0x01;
	int0=1;
	Delay(100);

    Initial();

	while(1)
	{
        Display_Picture(pic);
		Delay(65000);
	
		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic1);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic2);
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
		Display_Picture(pic3);
		Delay(65000);

		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
		Display_Chess(0x0f);
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
		Display_Chinese(font);
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();	
		Display_Chinese(font);
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
		Display_Chinese_Column(font);
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa7);//--set Inverse Display	
		SentByte(0x00);
		Stop();	
		Display_Chinese_Column(font);
		Delay(65000);


		Start();
		SentByte(Write_Address);
		SentByte(0x80);
		SentByte(0xa6);//--set normal display
		SentByte(0x00);
		Stop();
	}
}